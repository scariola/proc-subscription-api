<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracing="http://www.mulesoft.org/schema/mule/tracing"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/tracing http://www.mulesoft.org/schema/mule/tracing/current/mule-tracing.xsd">
	<munit:config
		name="impl-subscription-flows-test-suite.xml" />
	<munit:test
		name="impl-subscription-post-subscription-flow-success-opt-in-success-test"
		doc:id="53e180a3-2c55-44c2-8dd3-98563823476c">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock state"
				doc:id="bc05d6f8-93cd-4d7b-a925-367eee985b94" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="ea2cebf6-fe8a-41a6-be24-f1c0796c4edd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable key="state"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-state-0.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock provison"
				doc:id="09c2bf2b-fc7f-485d-92a1-1f1cff1b572a" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="impl-subscription-post-facebook-provision-subflow"
						attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable key="provisionResponse"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-provisionResponse-provision.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="b70ea5b6-4299-4438-a84c-0dc12d9a82b5">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-post-subscription-flow"
				doc:id="30d3f589-e26a-4b3c-8d09-e1647124203d"
				name="impl-subscription-post-subscription-flow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="745691a5-09f3-464d-ba64-dd62176ec805"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "smsMessaging": {
    "code": "200",
    "description": "Request has been forwarded to the service."
  }
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - Subcription Process Request"
				doc:id="2187b765-b8c9-4a89-a2c5-d0d33b208ca1" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b24f86b8-98de-40de-93d0-828aa25e7c11"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-post-subscription-flow-success-opt-out-success-test"
		doc:id="01741ab0-528c-445a-8a5a-d156aeae2ac6">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock state"
				doc:id="271d18a7-665a-4ff0-9259-b943b3473b47" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="ea2cebf6-fe8a-41a6-be24-f1c0796c4edd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable key="state"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-state-1.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock provison"
				doc:id="7e86f269-f708-46ee-bb15-4c2e1a99ddf4" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="impl-subscription-post-facebook-provision-subflow"
						attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable key="provisionResponse"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-provisionResponse-deprovision.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="334de229-d88e-4301-a3e7-d5bd0448044a">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-off-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload2.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-post-subscription-flow"
				doc:id="98cfa160-7bd5-4d9d-8f2c-62feb65a29c8"
				name="impl-subscription-post-subscription-flow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="8657af79-3a6e-4410-ae8a-03f885df5dd1"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "smsMessaging": {
    "code": "200",
    "description": "Request has been forwarded to the service."
  }
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - Subcription Process Request"
				doc:id="95a30f51-5b08-4622-ac15-07b2dfa0d552" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b24f86b8-98de-40de-93d0-828aa25e7c11"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-post-subscription-flow-bonus-success-test"
		doc:id="020bee8c-d840-4550-9ca1-eaddf680b31e">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock state"
				doc:id="acd18480-2df4-4d4a-8624-a3d2952e0d3c" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="ea2cebf6-fe8a-41a6-be24-f1c0796c4edd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable key="state"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-state-0.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock provison"
				doc:id="a17b4134-1cca-48b3-8bc0-f9fa046c68a5" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="impl-subscription-post-facebook-provision-subflow"
						attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:variables>
						<munit-tools:variable key="provisionResponse"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-provisionResponse-provision.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock sys-mongodb-api-get-msisdn-subflow" doc:id="1b0a2e7b-a3ea-4183-b5c7-6421f1688ddd" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0fdd0308-1b66-4eb4-99e3-c2a4d86df0b6" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="0fdd0308-1b66-4eb4-99e3-c2a4d86df0b6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-bonus-response.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="99b2cc74-46bb-43cd-b261-cd1e2c810e7a">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-bonus-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload3.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-post-subscription-flow"
				doc:id="ca75f61a-f00d-4ddc-b9c8-84ade71be109"
				name="impl-subscription-post-subscription-flow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="34ac6ea5-0f80-425f-af7d-351db98b7d08"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "smsMessaging": {
    "code": "200",
    "description": "Request has been forwarded to the service."
  }
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - Subcription Process Request"
				doc:id="42d69121-2dda-4808-a6df-f1ec46b44c0c" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b24f86b8-98de-40de-93d0-828aa25e7c11"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-post-audit-subflow-success-test"
		doc:id="78bf0904-5859-4a4c-b25e-272bd4b1d46a">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-audit-api-post-audit-subflow"
				doc:id="7fc6e286-fc86-4353-bb15-665e5dc9e9b2" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="47620c83-ad7e-497d-8d42-ce73446ecbcf"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://dw/mock/payload-audit-response.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="643fb054-efdd-4fab-b75f-0b8e95010490">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-post-audit-subflow"
				doc:id="49bcd5e3-a063-4c8c-90df-719ae30b6b46"
				name="impl-subscription-post-audit-subflow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="08cc7788-67f3-474b-9d2f-c6c4532ded97"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "id": "68767a5ab749f938d4c11b4a"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END  - Audit Logging Process"
				doc:id="94d73cee-0332-4eab-9ad3-29df281c7d36" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="125a6417-0c97-4601-904d-65d2e5ef1d3a"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	
	<munit:test
		name="impl-subscription-brand-lookup-subflow-get-brand-from-redis-success-test"
		doc:id="4b43129f-f734-4f62-b7cd-64dc3c970488">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-redis-api-get-brand-prefix-subflow"
				doc:id="68147358-262f-482b-9f5f-a4b83fdc5f0b" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="73ba302b-54fd-4be9-bf3e-3a80bef4031a"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://dw/mock/payload-get-redis-response.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable
							key="formattedSubscriberData"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="15fa5a11-bd5a-4b0f-a035-91be1e8932bb">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-brand-lookup-subflow"
				doc:id="90d5703a-7bb5-4c7f-9558-f5758ebe192d"
				name="impl-subscription-brand-lookup-subflow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="8e4eb732-c9aa-453b-9856-fb2a6f66b4af"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "x-event-id": "123",
  "x-event-code": 1005,
  "x-event-msg": "Success",
  "result": {
    "prefix": "91779",
    "brand-id": 3,
    "brand-name": "Postpaid"
  }
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - Brand Lookup"
				doc:id="5943db71-7a1e-46c1-897f-9b3a7d36b2fe" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6e639040-daa6-4b99-bf1a-ace8435fe943"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-brand-lookup-subflow-get-brand-from-bridge-success-test"
		doc:id="ac5bb6c6-51a9-44fa-9e8a-6467226a3c41">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-redis-api-get-brand-prefix-subflow"
				doc:id="666cfd45-ae64-4438-a0fc-ec80dd667e95" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="73ba302b-54fd-4be9-bf3e-3a80bef4031a"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://dw/mock/payload-get-redis-not-found-response.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when
				doc:name="Mock sys-redis-api-get-brand-bridge-api"
				doc:id="62ed2775-dbc5-4519-92da-9eb710da7d42" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="8c1e7c02-b7f8-48a3-acf0-3b1c820e2622"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://dw/mock/payload-get-bridge-response.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable
							key="formattedSubscriberData"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="5cbc818b-d8a7-447e-8fdd-6a58e1ab9d17">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-brand-lookup-subflow"
				doc:id="5569cab9-85de-488b-82bb-5cab3e33af18"
				name="impl-subscription-brand-lookup-subflow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="74f7e84b-1171-4fdc-85fa-1244f944c37c"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "prefix": "91779",
  "brand-id": 3,
  "brand-name": "Postpaid"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - Brand Lookup"
				doc:id="27cbcc4d-0417-460e-8ffa-ca5ed5883e8f" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6e639040-daa6-4b99-bf1a-ace8435fe943"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-brand-lookup-subflow-get-brand-from-bridge-unsupported-brand-failed-test"
		doc:id="e5f6f034-f5bc-41b4-a931-8a70c9df155a">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-redis-api-get-brand-prefix-subflow"
				doc:id="92092b51-2e97-4c14-b278-107430d5c8b0" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="73ba302b-54fd-4be9-bf3e-3a80bef4031a"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://dw/mock/payload-get-redis-unsupported-response.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="835f5759-e13e-4a07-b17b-4087d4e8dd94">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="c35be414-9fa2-4b0c-b36b-56163448552e">
				<flow-ref
					doc:name="Flow-ref to impl-subscription-brand-lookup-subflow"
					doc:id="a64e825c-604c-4d85-af4d-ca1f16942fb2"
					name="impl-subscription-brand-lookup-subflow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="522c6d9c-944c-4b95-b3f8-2352c93b0719">
						<logger level="INFO" doc:name="Logger"
							doc:id="24389444-bae0-4fcd-9b0e-c84b6a77720e" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify Raise Error-INPUT:UNSUPPORTED"
				doc:id="52b2859e-ce94-4561-900b-9e224eca992c"
				processor="raise-error" times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="4686e406-302f-4314-ac17-296c12cb3536"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-brand-lookup-subflow-get-brand-from-redis-on-error-continue-test"
		doc:id="4e3ebe2e-b7a3-4248-b916-bed355fd6693">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-redis-api-get-brand-prefix-subflow"
				doc:id="06209b0a-1eef-4ec2-88ee-0191c34af9f2" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="73ba302b-54fd-4be9-bf3e-3a80bef4031a"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="HTTP:BAD_REQUEST" />
					<munit-tools:variables>
						<munit-tools:variable
							key="formattedSubscriberData"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="842aa0a9-0324-4601-a2ad-b448fc347b34">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-brand-lookup-subflow"
				doc:id="b101e11a-9954-4a9c-8d85-15766447d783"
				name="impl-subscription-brand-lookup-subflow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="a476ab7e-c3db-4ed9-9cfd-7cd4a8500db6"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "prefix": "91779",
  "brand-id": 3,
  "brand-name": "Postpaid"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END - Brand Lookup"
				doc:id="b9d2fb48-46bd-4508-8a60-35553a051a19" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="6e639040-daa6-4b99-bf1a-ace8435fe943"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-state-lookup-subflow-no-state-found-test"
		doc:id="b197216b-f9d5-4135-b79e-147b17c3486c">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-redis-api-get-state-msisdn-subflow"
				doc:id="026e8c6e-9def-40f4-8e83-d8a1320165ab" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="78189739-765a-454d-862f-ad0e3b23c700"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://dw/mock/payload-get-state-not-found-response.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable
							key="formattedSubscriberData"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input1"
				doc:id="52109b9c-4d60-460e-be3e-3b7083425814">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-state-lookup-subflow"
				doc:id="ecfe883e-9d28-4ac3-8ce9-67fb79d55a61"
				name="impl-subscription-state-lookup-subflow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="b42a03a0-c372-4c5c-a239-ba29342ec814"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "x-event-id": "123",
  "x-event-code": 1006,
  "x-event-msg": "No Key Found!",
  "result": {}
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END- State Lookup"
				doc:id="98b1491b-0552-4790-bea5-6edbf6500dfa" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f0dc7604-0ad4-40ac-b69c-7de897349ccd"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-post-brand-subflow-success-test"
		doc:id="64ce52ee-79d5-4c9e-b362-b106922fddfd">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-redis-api-post-brand-prefix-subflow"
				doc:id="a1e0a9a7-59e7-4a5f-baf7-a56092144abc" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f488925a-519f-445c-963d-231f3f08cf9e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://dw/mock/payload-post-brand-response.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable
							key="formattedSubscriberData"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="742e9249-4245-441f-a8a1-93512d3d48e1">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/mock/payload-get-bridge-response.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref
				doc:name="Flow-ref to impl-subscription-post-brand-subflow"
				doc:id="b69648d4-bad1-4749-859a-c8ce3b01b3cf"
				name="impl-subscription-post-brand-subflow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload"
				doc:id="858e13e9-1320-456f-b4db-f788abc6caee"
				message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "prefix": "91779",
  "brand-id": 3,
  "brand-name": "Postpaid"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call
				doc:name="Verify END- Post brand from bridge"
				doc:id="76036cf2-3e11-4ba3-b2ff-da523e72d155" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="b42473d3-a1d1-4ede-af61-624e3ba04796"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-post-brand-subflow-on-error-propogate-test"
		doc:id="ec0d9150-4446-41bc-8eed-154c25a60a41">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-redis-api-post-brand-prefix-subflow"
				doc:id="0e34c02f-bb0f-4483-8b62-9f135ac25b0a" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="f488925a-519f-445c-963d-231f3f08cf9e"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="ANY" />
					<munit-tools:variables>
						<munit-tools:variable
							key="formattedSubscriberData"
							value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]"
							mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input"
				doc:id="a29869d6-d520-4237-873c-28d13f6b55b2">
				<munit:payload
					value="#[output application/json --- readUrl('classpath://dw/mock/payload-get-bridge-response.dwl')]"
					encoding="UTF-8" mediaType="application/json" />
				<munit:attributes
					value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData"
						value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]"
						encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="c4db4c09-5fa1-4b1c-8a29-c310e385e786">
				<flow-ref
					doc:name="Flow-ref to impl-subscription-post-brand-subflow"
					doc:id="2d66419c-f273-4fcb-9ac0-19f47339b061"
					name="impl-subscription-post-brand-subflow" />
				<error-handler>
					<on-error-continue enableNotifications="true"
						logException="true" doc:name="On Error Continue"
						doc:id="49cc1f36-e3c8-440d-a730-da6ee805dfad">
						<logger level="INFO" doc:name="Logger"
							doc:id="8c5ebf6e-67ec-421f-be72-b788762f2ae2" message="#[error]" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:verify-call
				doc:name="Verify Log -Stop Process"
				doc:id="95c87dc2-9806-4676-a2c3-a029c96deecd" processor="logger"
				times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="3addf38c-b35f-4ce7-8617-a87e8b1f3aed"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test
		name="impl-subscription-lookup-prepaid-postpiad-subflow-postpaid-success-test"
		doc:id="540beefd-cf90-4317-98f3-b0ac2b7f51b3">
		<munit:behavior>
			<munit-tools:mock-when
				doc:name="Mock sys-bss-api-get-postpiad-msisdn-flow"
				doc:id="e78eca61-1a35-4938-9ef3-c389784ec23f" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute
						whereValue="be8bdb96-659f-428f-afbd-15981d5f2ff5"
						attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload
						value="#[output application/json --- readUrl('classpath://dw/mock/payload-bss-postpiad-response.dwl')]"
						mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input" doc:id="4dd12537-435b-4bc2-8a7f-46983b02454c" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData-" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-check-eligibility-prepaid-postpiad-subflow" doc:id="9fe3de40-0432-4ea2-a31b-97c8687eff57" name="impl-subscription-check-eligibility-prepaid-postpiad-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a9ce2402-abc9-43bf-b74a-b0af3531d1e5" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "bundles": [
    {
      "promo_name": "BEST EVER MYSUPERPLAN 499",
      "expiry_date": "2025-12-31 23:59:59"
    }
  ],
  "msisdn": "9177939217"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END - Prepaid Postpaid Lookup" doc:id="c7b87a98-dd2f-4161-a186-891241038c2f" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="32230055-69ae-4d91-87a3-5e0b717c5e15" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-lookup-prepaid-postpiad-subflow-nf-prepaid-success-test" doc:id="cf0d0908-bd0c-479e-9d86-27d08a29c75d">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-bss-api-get-prepaid-msisdn-flow" doc:id="daa2e0af-b497-4c9f-a9e1-97685f0b6be0" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="4a60da90-8dc9-44ad-844b-dc47ff3e8c8d" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-nf-prepaid-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="c2fb66e1-6ec6-4952-8463-6309b9d29067" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in-nf.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload-nf.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in-nf.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="brand" value="#[output application/json --- readUrl('classpath://dw/mock/var-brand-1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-check-eligibility-prepaid-postpiad-subflow" doc:id="e17c7da6-a4f3-4b89-8f1d-c2edd0dd548a" name="impl-subscription-check-eligibility-prepaid-postpiad-subflow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="78a72abf-d95e-4bb2-a01b-5a1ef14b00cb" message="The payload does not match" >
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
    "bundles": [
        {
            "service_id": "2536",
            "expiry_date": "2025-12-31 23:59:59"
        },
        {
            "service_id": "2536",
            "expiry_date": "2025-12-31 23:59:59"
        }
    ],
    "msisdn": "9271234567"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END - Prepaid Postpaid Lookup" doc:id="ea98657d-1995-4e24-b9b7-86488169dd0e" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="32230055-69ae-4d91-87a3-5e0b717c5e15" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-lookup-prepaid-postpiad-subflow-raise-error-ineligible-failure-test" doc:id="c5565f62-7ed9-40de-b8ed-2124479644b5">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-bss-api-get-prepaid-msisdn-flow" doc:id="06a869d1-72c9-4386-bec5-88c0978c1c42" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="4a60da90-8dc9-44ad-844b-dc47ff3e8c8d" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-nf-prepaid-not-found-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="c50e77f1-a139-4a05-b975-ba350f51d777" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in-nf.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload-nf.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData-" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in-nf.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="brand" value="#[output application/json --- readUrl('classpath://dw/mock/var-brand-1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="73a73a3c-6d64-4ead-8bc3-9bcf35f30228" >
				<flow-ref doc:name="Flow-ref to impl-subscription-lookup-prepaid-postpiad-subflow" doc:id="ded875e3-b564-4c83-a901-ec88a681337a" name="impl-subscription-check-eligibility-prepaid-postpiad-subflow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="f2836a6d-81af-4e1c-abd3-a29ef5e9e911" >
						<logger level="INFO" doc:name="Logger" doc:id="105f825d-3f69-483c-982f-dcad66f3dd07" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify INPUT:INELIGIBLE" doc:id="6ba5368d-810c-451e-a217-04aa05843537" processor="raise-error" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="cef58b8d-2657-436d-b5ab-8ead0516b932" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-get-bonus-subflow-success-test" doc:id="3a545418-473a-46d1-a2d6-27126c64b9bb">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-mongodb-api-get-whitelist-msisdn-subflow" doc:id="09e835cd-6f19-480b-965e-f04a94022010" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0fdd0308-1b66-4eb4-99e3-c2a4d86df0b6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-bonus-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="28ef5d22-dabe-429d-aa29-1e48f616d4ec" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-bonus-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-bonus-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData-" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in-bonus.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="brand" value="#[output application/json --- readUrl('classpath://dw/mock/var-brand-1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-check-eligibility-bonus-subflow" doc:id="4d66a608-061f-40e9-8079-16afbfb20497" name="impl-subscription-check-eligibility-bonus-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3395cd81-21ae-4376-a83d-a3b243ba8b9d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "x-event-id": "123",
  "x-event-code": 1005,
  "x-event-msg": "Success",
  "results": {
    "msisdn": "639276749952",
    "eligible": true
  }
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END - Get msisdn Bonus " doc:id="4272a27a-5ff4-464e-bc91-dbec9286f6c5" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8dad676f-4dbc-43c2-8e21-ef46e62d9ea3" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-get-bonus-subflow-not-found-raise-error-failure-test" doc:id="8ca43382-4d65-4c99-8bed-2c973c833daf">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-mongodb-api-get-whitelist-msisdn-subflow" doc:id="c5de22e6-803b-4306-8294-cfe6cc4cca66" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0fdd0308-1b66-4eb4-99e3-c2a4d86df0b6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- {&#10;    "x-event-id": "123",&#10;    "x-event-code": 1006,&#10;    "x-event-msg": "No MSISDN Found",&#10;    "result": {}&#10;}]' mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="db540709-a3ae-4282-a037-ade147b67c1b" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-bonus-no-record-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-bonus-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData-" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in-bonus.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="brand" value="#[output application/json --- readUrl('classpath://dw/mock/var-brand-1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="2e812b56-6e30-472f-8ada-97554993e5ce" >
				<flow-ref doc:name="Flow-ref to impl-subscription-check-eligibility-bonus-subflow" doc:id="7749250e-4d43-457a-ae79-f961caa2f21b" name="impl-subscription-check-eligibility-bonus-subflow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="1c9b0b7b-515f-43e2-a596-ec274264b9f0" >
						<logger level="INFO" doc:name="Logger" doc:id="e33c3a09-d6b6-48ad-be38-b00b0b3b95ad" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify INPUT:INELIGIBLE" doc:id="80bcbe5d-d8c3-4404-9d68-b5cd21fa096a" processor="raise-error" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="ceb053bc-4b61-4c72-88b1-888583981185" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-facebook-provision-subflow-provision-sucess-test" doc:id="3fd96fde-850e-4035-a07a-8e64c1ee07b6">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-facebook-api-post-provision-subflow" doc:id="da74122b-0dac-48de-aaea-fc1843cdaaf5" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b6b9e7e2-08ff-41bc-b325-8c7972a5a4fd" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-provision-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="8631ff42-8cc1-482b-9911-a5d0c1ee8f29" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="brand" value="#[output application/json --- readUrl('classpath://dw/mock/var-brand-3.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-post-facebook-provision-subflow" doc:id="617e1fd9-3053-41f0-bb27-14bcfa3026c9" name="impl-subscription-post-facebook-provision-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c9e99588-f080-4b7f-9277-808bcc5297e2" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "x-event-id": "123",
  "x-event-code": 1005,
  "x-event-msg": "Provisioning Successful"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END  - Provision Process " doc:id="fa201bf1-7f61-4914-beb2-456a690fbe26" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="af797a39-04d9-4b63-9049-6823ec996b34" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-facebook-provision-subflow-deprovision-sucess-test" doc:id="52fda281-65ac-4d92-93a2-361c833cb795">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-facebook-api-post-provision-subflow" doc:id="68e75056-df4f-4c74-a81e-bb42fc1878b5" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b6b9e7e2-08ff-41bc-b325-8c7972a5a4fd" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-deprovision-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="9b5a92db-a9ad-4d0a-89ed-0ec104fcddb3" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="brand" value="#[output application/json --- readUrl('classpath://dw/mock/var-brand-3.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-post-facebook-provision-subflow" doc:id="3add559c-e45c-4c34-bceb-1108e1cbd5f3" name="impl-subscription-post-facebook-provision-subflow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3a7e1663-f2e8-4020-b8e9-c6e296b02ae3" message="The payload does not match" >
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "x-event-id": "123",
  "x-event-code": 1005,
  "x-event-msg": "Deprovisioning Successful"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END  - Provision Process " doc:id="249f68cd-ec9a-4a98-95f1-495473d70925" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="af797a39-04d9-4b63-9049-6823ec996b34" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-facebook-provision-subflow-bonus-provision-test" doc:id="da418587-85a3-49d1-9081-f79d7cac1d0d">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-facebook-api-post-provision-subflow" doc:id="6c166108-bfb3-4421-9573-6528e8cb0551" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b6b9e7e2-08ff-41bc-b325-8c7972a5a4fd" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-provision-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock impl-subscription-delete-bonus-subflow" doc:id="8fb88add-22cc-48ce-95f1-a3e91e7e35d5" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="13234db9-edd1-48a0-9406-1ad385720593" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-remove-bonus-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="a8d67ff9-0233-4be7-8ae3-3d088e2d863d" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-bonus-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload3.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="formattedSubscriberData" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-bonus.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-post-facebook-provision-subflow" doc:id="0b8f9540-0d0a-406f-aeef-94faafe37711" name="impl-subscription-post-facebook-provision-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="0a9715f3-4d88-4592-845f-85a6cac38245" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "x-event-id": "123",
  "x-event-code": 1999,
  "x-event-msg": "MSISDN successfully removed from whitelist"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END  - Provision Process " doc:id="c9ff86ad-d386-4daf-956f-63a1bf6e2860" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="af797a39-04d9-4b63-9049-6823ec996b34" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-state-subflow-success-test" doc:id="96c0c5c8-be36-4c5a-bedc-f30cd2e7390e">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-post-state-subflow" doc:id="685b2be7-84bc-4779-ba49-2d749cd78410" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="60da4d68-de6b-4003-bcfc-97cf4844385a" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-post-state-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="79d268a7-1634-49cb-beed-ec8eca768866">
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="formattedSubscriberData" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="expiryDetails" value="#[output application/json --- readUrl('classpath://dw/mock/var-expiryDetails.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-post-state-subflow" doc:id="51bfb494-00b4-47a5-9ef2-aedf63d24c98" name="impl-subscription-post-state-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ecf0560a-a226-42e5-a498-b142ea5a6605" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "x-event-id": "123",
  "x-event-code": 1002,
  "x-event-msg": "Cache State Successful!"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END- State Caching" doc:id="8c718c39-bf7b-48d0-aea6-6e8db6a1c5f5" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="eff6d585-cdd8-493f-a785-a78cc1219840" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-state-subflow-on-error-continue-test" doc:id="810debdb-02b0-4de8-bb88-89f7aa0a733a">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-post-state-subflow" doc:id="51f06788-408c-45c7-b9d5-fb81a387aca1" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="60da4d68-de6b-4003-bcfc-97cf4844385a" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="5c7c30ed-64ee-41a3-ad6b-4551cfc84212" >
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="formattedSubscriberData" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-opt-in.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="expiryDetails" value="#[output application/json --- readUrl('classpath://dw/mock/var-expiryDetails.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-post-state-subflow" doc:id="d3cffed2-02d3-41f1-ac21-088f22b687be" name="impl-subscription-post-state-subflow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify END- State Caching" doc:id="955c718d-92d4-4d08-85f9-8f1801d94726" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="eff6d585-cdd8-493f-a785-a78cc1219840" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-put-audit-subflow-success-test" doc:id="9132533b-b19a-4992-8e9e-eda65c35c8b6">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-audit-api-put-audit-subflow" doc:id="8b5aaf4b-36ac-4202-b421-08feafbccde5" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="82eee915-548b-4c4d-8d86-0407536d902e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- {&#10;  "id": "68772822b749f938d4c11b89"&#10;}]' mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="ed11fd7c-480f-4fac-9e65-5d871e826511">
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="auditId" value="#[output application/json --- readUrl('classpath://dw/mock/var-auditId.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-put-audit-subflow" doc:id="46fc2509-77e9-4c23-8d23-6a4aa8f6a27a" name="impl-subscription-put-audit-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="69d789ed-3fd5-4dce-abe3-06eb32176160" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "id": "68772822b749f938d4c11b89"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END - Update Audit Logging" doc:id="ad9c558b-d23a-40b0-a507-00dc325cfa24" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="dd75d9e7-9a71-4d19-94f4-41c212547619" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-put-audit-subflow-on-error-continue-test" doc:id="69cf6f17-819b-46b6-af5d-05bcd46b4d69">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-audit-api-put-audit-subflow" doc:id="ee096ef5-bef8-4aa6-90e1-4ec3e8f6c59e" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="82eee915-548b-4c4d-8d86-0407536d902e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="9378826c-bc77-4faa-bc58-b364d3ba124f" >
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="auditId" value="#[output application/json --- readUrl('classpath://dw/mock/var-auditId.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-put-audit-subflow" doc:id="70f5abe7-376a-486f-9943-395626fe001b" name="impl-subscription-put-audit-subflow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify END - Update Audit Logging" doc:id="eb368566-08cb-47b6-ac64-f47c40c0b9d2" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="dd75d9e7-9a71-4d19-94f4-41c212547619" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-sms-subflow-success-test" doc:id="6c053552-9c81-4641-a2fb-d9d1835916b5">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-sms-api-subflow" doc:id="74d22c2b-ee8e-472d-9cdb-e3418cde34f5" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a53cccc2-654c-4066-8d5b-7284f8434493" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-post-sms-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="cec3a501-000f-49fb-8fe0-d49d6d6783a1">
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="expiryDetails" value="#[output application/json --- readUrl('classpath://dw/mock/var-expiryDetails.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="state" value="#[output application/json --- readUrl('classpath://dw/mock/var-state-0.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="brand" value="#[output application/json --- readUrl('classpath://dw/mock/var-brand-1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-post-sms-subflow" doc:id="d922867f-4093-4ea6-bc15-4112098b8087" name="impl-subscription-post-sms-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="53fbf797-75a5-4c22-bfef-3cc38ee613af" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "smsMessaging": {
    "code": "200",
    "description": "Request has been forwarded to the service."
  }
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END - SMS Messaging Process" doc:id="1cb919e3-7a86-4660-863e-a3ed90c399a3" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d2e18799-9a72-40a5-8add-3e5dc9051b0c" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-sms-subflow-on-error-continue-test" doc:id="dcae80e2-6b00-4438-a39c-36d4f6ddb37d">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-sms-api-subflow" doc:id="f845eb66-549a-4df4-aff7-6ada741c084d" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a53cccc2-654c-4066-8d5b-7284f8434493" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="19cb0523-83a2-40c5-aa52-a83c7ca1bafc" >
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="expiryDetails" value="#[output application/json --- readUrl('classpath://dw/mock/var-expiryDetails.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="state" value="#[output application/json --- readUrl('classpath://dw/mock/var-state-0.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="brand" value="#[output application/json --- readUrl('classpath://dw/mock/var-brand-1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-post-sms-subflow" doc:id="9ac556ae-f150-456b-a5d3-935951fd6dfe" name="impl-subscription-post-sms-subflow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify END - SMS Messaging Process" doc:id="f3f41b50-f28f-4e15-9d03-183cdcef5354" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d2e18799-9a72-40a5-8add-3e5dc9051b0c" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-delete-bonus-subflow-success-test" doc:id="fd6002e0-1843-47b5-8eb2-75f9f9019eac">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-mongodb-api-delete-whitelist-msisdn-subflow" doc:id="ff48d114-4a82-4816-9b38-4f7af659acfe" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a2d06424-5d43-41c0-b999-f0fb57c8ab52" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-remove-bonus-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="1538c81b-6563-4213-8d27-04e0dc502836">
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="formattedSubscriberData" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-bonus.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-delete-bonus-subflow" doc:id="a9070a0a-bb8a-4397-b5a1-ea5146c1c95a" name="impl-subscription-delete-bonus-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ed10dc1b-7342-499b-9e42-280fc0106fc6" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import * from dw::test::Asserts
---
payload must equalTo({
  "x-event-id": "123",
  "x-event-code": 1999,
  "x-event-msg": "MSISDN successfully removed from whitelist"
})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify END - Mongdb Delete msisdn" doc:id="31216bb8-7a2b-4bae-b804-5ab1a912f07b" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="35ae0728-de2f-4188-bbfc-ebe30b9be8d2" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-delete-bonus-subflow-on-error-continue-test" doc:id="fbd6b047-e82e-43f5-86ab-4fbd1b7ee3c6">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock sys-mongodb-api-delete-whitelist-msisdn-subflow" doc:id="6e7f7a82-956e-44e7-9591-0c5e5e210a7d" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a2d06424-5d43-41c0-b999-f0fb57c8ab52" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="26404fbe-ad3f-472f-89f0-dd414afc6340" >
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="formattedSubscriberData" value="#[output application/json --- readUrl('classpath://dw/mock/var-formattedSubscriberData-bonus.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<flow-ref doc:name="Flow-ref to impl-subscription-delete-bonus-subflow" doc:id="2307b04c-ce4b-4978-86a2-70c3845705a6" name="impl-subscription-delete-bonus-subflow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify END - Mongdb Delete msisdn" doc:id="33853a08-79d5-42ea-9591-b07817b2a8eb" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="35ae0728-de2f-4188-bbfc-ebe30b9be8d2" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
<munit:test name="impl-subscription-post-subscription-flow-proc-subscription-api-Shared_Error_Handler-http-bad-request-test" doc:id="a172737f-234a-4c61-856a-923cd288d32f">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock HTTP BAD REQUEST" doc:id="3753cb04-d909-4115-a9c5-5a6d9d14c439" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="df1eddac-db79-438b-bf53-3012de73f9f2" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="df1eddac-db79-438b-bf53-3012de73f9f2" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="mock impl-subscription-put-audit-subflow" doc:id="618855e0-684a-40ca-9eaa-f0f19468f070" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- {&#10;    "id": "6856bfbcb749f938d4c11177"&#10;}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock impl-subscription-post-sms-subflow" doc:id="2e30e2bd-8064-4821-9e17-9f57d3bbefa5" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a9d3eb95-0d1c-433b-8361-eb02b2b68eac" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-post-sms-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="0cf63884-5a66-45bc-8447-b60abe9256c5" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="2505efbb-0642-47c9-9936-549fa781cfbc" >
				<flow-ref doc:name="impl-subscription-post-subscription-flow" doc:id="4911ce7c-9715-4505-8fe8-536cd8849256" name="impl-subscription-post-subscription-flow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="36d72883-4342-4c2f-9dd3-efb754f5e55b" >
						<logger level="INFO" doc:name="Logger" doc:id="aa16fcd9-e5f0-457a-9752-66acf62b35ab" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert " doc:id="c5119f72-4fa2-4fad-b8e2-36d85037b257" is="#[MunitTools::equalTo('HTTP:BAD_REQUEST')]" expression="#[payload.result.'error-type']"/>
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="d74e48b7-6492-4ebe-a821-37af6ae2eae1" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75a9cf47-b2e5-4353-8e74-c674e73f8c8b" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-subscription-flow-proc-subscription-api-Shared_Error_Handler-http-connectivity-test" doc:id="7827a4b1-bd63-41c6-af3a-0d4c83746f67">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock HTTP:CONNECTIVITY" doc:id="5eaf83b5-52ab-4465-9620-e32dcf92e261" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="df1eddac-db79-438b-bf53-3012de73f9f2" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="mock impl-subscription-put-audit-subflow" doc:id="4404b812-19d2-44a5-bbd0-9bcbe120ed3a" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- {&#10;    "id": "6856bfbcb749f938d4c11177"&#10;}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock impl-subscription-post-sms-subflow" doc:id="1173cd0a-d1c5-499e-b8cd-28bc4dda8a24" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a9d3eb95-0d1c-433b-8361-eb02b2b68eac" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-post-sms-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="2d880310-801d-4042-b438-8ed8e1d67dc0" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="2d16200f-de48-4a59-aa52-71b8b4c96bbb" >
				<flow-ref doc:name="impl-subscription-post-subscription-flow" doc:id="8bad7a84-c797-416a-a952-cb74f4b8a6c4" name="impl-subscription-post-subscription-flow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="6639e2df-7442-4682-8715-62296eb0e1ce" >
						<logger level="INFO" doc:name="Logger" doc:id="1e05f705-7cba-4db4-876c-7d5b9398950a" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert " doc:id="dadcb844-4e19-415b-9ed0-fc649efa005e" is="#[MunitTools::equalTo('HTTP:CONNECTIVITY')]" expression="#[payload.result.'error-type']" />
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="bf3088a9-09c2-4eee-b704-959b7f5366c7" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75a9cf47-b2e5-4353-8e74-c674e73f8c8b" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-subscription-flow-proc-subscription-api-Shared_Error_Handler-any-test" doc:id="9279ea51-3af7-483a-bd29-dbcbf6c4d8b1">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock MULE:ANY" doc:id="ea1710ba-3c17-491b-9d23-7f916da2be86" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="df1eddac-db79-438b-bf53-3012de73f9f2" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="mock impl-subscription-put-audit-subflow" doc:id="6495b425-b006-4386-ad2e-57d5f7fee868" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value='#[output application/json --- {&#10;    "id": "6856bfbcb749f938d4c11177"&#10;}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock impl-subscription-post-sms-subflow" doc:id="99b8b7cd-02ef-468c-a4f8-a21c3e114fbf" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="a9d3eb95-0d1c-433b-8361-eb02b2b68eac" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-post-sms-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<munit:set-event doc:name="Set Input" doc:id="76177e98-e6ce-48bd-b212-1047a85f2e53">
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables>
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="9073fbb7-2dba-4be8-98c0-cb0523a0eb5c">
				<flow-ref doc:name="impl-subscription-post-subscription-flow" doc:id="09fbe7ba-1750-4596-896d-f17f201b60e0" name="impl-subscription-post-subscription-flow" />
				<error-handler>
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="e8ef1264-d0de-4f65-b5ae-503d3fed411a">
						<logger level="INFO" doc:name="Logger" doc:id="df7e603d-81da-43b1-ac36-41cb39190099" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:name="Assert " doc:id="70177488-745a-4bce-be48-b5b938c348ec" expression="#[payload.result.'error-type']" is="#[MunitTools::equalTo('MULE:ANY')]" />
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="de19ddbc-0002-4a17-9f19-ad8e191208a2" processor="logger" times="1">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="75a9cf47-b2e5-4353-8e74-c674e73f8c8b" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-subscription-flow-proc-subscription-api-Shared_Error_Handler-unsupported-test" doc:id="fd186e4e-2ef1-4ab2-b3a2-64f56679551f">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock INPUT:UNSUPPORTED" doc:id="0203886c-96be-4871-8045-b379ad3cf01b" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="df1eddac-db79-438b-bf53-3012de73f9f2" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="INPUT:UNSUPPORTED" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="mock impl-subscription-put-audit-subflow" doc:id="8e3969fb-0966-41c6-b10c-78cec1fc18e4" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- {&#10;    "id": "6856bfbcb749f938d4c11177"&#10;}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock impl-subscription-post-sms-subflow" doc:id="1845be18-3ebe-4cac-be98-df439bfedd34" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a9d3eb95-0d1c-433b-8361-eb02b2b68eac" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-post-sms-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="8abb31b4-c306-4e08-9fb2-9d1ec50f6304" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="80a08e5b-a504-401f-9d5c-824324aa3146" >
				<flow-ref doc:name="impl-subscription-post-subscription-flow" doc:id="2c85845f-f939-409d-8a5c-9a8e96e8a5fe" name="impl-subscription-post-subscription-flow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="eea9595b-ea2f-4fcc-9b43-53f8129c4c38" >
						<logger level="INFO" doc:name="Logger" doc:id="bad5c1d9-c68d-47c8-b4b2-c0f54b631868" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert " doc:id="3df1c298-33c4-42f0-bccb-85f627ec411b" expression="#[payload.'x-event-msg']" is="#[MunitTools::equalTo('failure')]" />
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="9e165160-9ab1-4bab-abb8-50c414bf9b96" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75a9cf47-b2e5-4353-8e74-c674e73f8c8b" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="impl-subscription-post-subscription-flow-proc-subscription-api-Shared_Error_Handler-ineligible-test" doc:id="ba9a2002-8adc-462d-aed1-5984cc3ce31e" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock INPUT:UNSUPPORTED" doc:id="84ba85c8-b98a-473b-ab6b-65aeb84bfd29" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="df1eddac-db79-438b-bf53-3012de73f9f2" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="INPUT:INELIGIBLE" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="mock impl-subscription-put-audit-subflow" doc:id="b64aeb21-3cc2-4538-b11d-108c87159dbd" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="03f00fdd-d99b-46c7-adf1-9dd7659d22a3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[output application/json --- {&#10;    "id": "6856bfbcb749f938d4c11177"&#10;}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock impl-subscription-post-sms-subflow" doc:id="fc6be1ef-ad5a-4b7a-962a-07aac6102c09" processor="flow-ref" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a9d3eb95-0d1c-433b-8361-eb02b2b68eac" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://dw/mock/payload-post-sms-response.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<munit:set-event doc:name="Set Input" doc:id="2f58be5b-1a31-46d4-b841-5adb69db6fdf" >
				<munit:payload value="#[output application/json --- readUrl('classpath://dw/events/payload-subscription-fb-on-request.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://dw/events/attr-post-subcription.dwl')]" />
				<munit:variables >
					<munit:variable key="originalPayload" value="#[output application/json --- readUrl('classpath://dw/mock/var-originalPayload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
			<try doc:name="Try" doc:id="4724a3af-6aa5-45b4-83f7-7f7c3c915cf5" >
				<flow-ref doc:name="impl-subscription-post-subscription-flow" doc:id="e181f350-61bc-40a1-9172-0563e293a475" name="impl-subscription-post-subscription-flow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="6252851a-3fcd-48ab-932e-85e81373e174" >
						<logger level="INFO" doc:name="Logger" doc:id="602aac3e-449f-4932-8ca6-ce65c439d3d4" />
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert " doc:id="abe68d4d-9027-456d-9c8b-5ca68cbfed21" expression="#[payload.'x-event-msg']" is="#[MunitTools::equalTo('failure')]" />
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="6efa80c9-b1c9-451d-817f-d5b95558a69c" processor="logger" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="75a9cf47-b2e5-4353-8e74-c674e73f8c8b" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>

</mule>
